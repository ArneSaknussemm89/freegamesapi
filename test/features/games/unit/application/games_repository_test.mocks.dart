// Mocks generated by Mockito 5.1.0 from annotations
// in freegamesexample/test/features/games/unit/application/games_repository_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i8;

import 'package:dio/dio.dart' as _i2;
import 'package:freegamesexample/core/adapters.dart' as _i3;
import 'package:freegamesexample/core/use_cases.dart' as _i6;
import 'package:freegamesexample/data/adapters/dio_adapter.dart' as _i4;
import 'package:freegamesexample/features/games/application/use_cases/fetch_all_games.dart'
    as _i7;
import 'package:freegamesexample/features/games/data/data_sources/games_api.dart'
    as _i5;
import 'package:freegamesexample/features/games/data/repositories/games.dart'
    as _i10;
import 'package:freegamesexample/features/games/domain/models/game/game.dart'
    as _i9;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeDio_0 extends _i1.Fake implements _i2.Dio {}

class _FakeAdapterResponse_1<T> extends _i1.Fake
    implements _i3.AdapterResponse<T> {}

class _FakeDioAdapter_2 extends _i1.Fake implements _i4.DioAdapter {}

class _FakeGameApiDataSource_3 extends _i1.Fake
    implements _i5.GameApiDataSource {}

class _FakeUseCaseResult_4<E, T> extends _i1.Fake
    implements _i6.UseCaseResult<E, T> {}

class _FakeFetchAllGamesUseCase_5 extends _i1.Fake
    implements _i7.FetchAllGamesUseCase {}

/// A class which mocks [DioAdapter].
///
/// See the documentation for Mockito's code generation for more information.
class MockDioAdapter extends _i1.Mock implements _i4.DioAdapter {
  MockDioAdapter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Dio get client =>
      (super.noSuchMethod(Invocation.getter(#client), returnValue: _FakeDio_0())
          as _i2.Dio);
  @override
  _i8.Future<_i3.AdapterResponse<T>> get<T>(_i4.DioAdapterOptions? options) =>
      (super.noSuchMethod(Invocation.method(#get, [options]),
              returnValue: Future<_i3.AdapterResponse<T>>.value(
                  _FakeAdapterResponse_1<T>()))
          as _i8.Future<_i3.AdapterResponse<T>>);
  @override
  _i8.Future<_i3.AdapterResponse<T>> post<T>(_i4.DioAdapterOptions? options) =>
      (super.noSuchMethod(Invocation.method(#post, [options]),
              returnValue: Future<_i3.AdapterResponse<T>>.value(
                  _FakeAdapterResponse_1<T>()))
          as _i8.Future<_i3.AdapterResponse<T>>);
  @override
  _i8.Future<_i3.AdapterResponse<T>> put<T>(_i4.DioAdapterOptions? options) =>
      (super.noSuchMethod(Invocation.method(#put, [options]),
              returnValue: Future<_i3.AdapterResponse<T>>.value(
                  _FakeAdapterResponse_1<T>()))
          as _i8.Future<_i3.AdapterResponse<T>>);
  @override
  _i8.Future<_i3.AdapterResponse<T>> patch<T>(_i4.DioAdapterOptions? options) =>
      (super.noSuchMethod(Invocation.method(#patch, [options]),
              returnValue: Future<_i3.AdapterResponse<T>>.value(
                  _FakeAdapterResponse_1<T>()))
          as _i8.Future<_i3.AdapterResponse<T>>);
  @override
  _i8.Future<_i3.AdapterResponse<T>> delete<T>(
          _i4.DioAdapterOptions? options) =>
      (super.noSuchMethod(Invocation.method(#delete, [options]),
              returnValue: Future<_i3.AdapterResponse<T>>.value(
                  _FakeAdapterResponse_1<T>()))
          as _i8.Future<_i3.AdapterResponse<T>>);
}

/// A class which mocks [FetchAllGamesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchAllGamesUseCase extends _i1.Mock
    implements _i7.FetchAllGamesUseCase {
  MockFetchAllGamesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.DioAdapter get adapter => (super.noSuchMethod(Invocation.getter(#adapter),
      returnValue: _FakeDioAdapter_2()) as _i4.DioAdapter);
  @override
  _i5.GameApiDataSource get dataSource =>
      (super.noSuchMethod(Invocation.getter(#dataSource),
          returnValue: _FakeGameApiDataSource_3()) as _i5.GameApiDataSource);
  @override
  _i8.Future<_i6.UseCaseResult<Object?, List<_i9.Game>>> execute() =>
      (super.noSuchMethod(Invocation.method(#execute, []),
          returnValue: Future<_i6.UseCaseResult<Object?, List<_i9.Game>>>.value(
              _FakeUseCaseResult_4<Object?, List<_i9.Game>>())) as _i8
          .Future<_i6.UseCaseResult<Object?, List<_i9.Game>>>);
}

/// A class which mocks [GamesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockGamesRepository extends _i1.Mock implements _i10.GamesRepository {
  MockGamesRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.FetchAllGamesUseCase get fetchAllGamesUseCase => (super.noSuchMethod(
      Invocation.getter(#fetchAllGamesUseCase),
      returnValue: _FakeFetchAllGamesUseCase_5()) as _i7.FetchAllGamesUseCase);
  @override
  _i4.DioAdapter get adapter => (super.noSuchMethod(Invocation.getter(#adapter),
      returnValue: _FakeDioAdapter_2()) as _i4.DioAdapter);
  @override
  _i8.Future<List<_i9.Game>> getAllGames() =>
      (super.noSuchMethod(Invocation.method(#getAllGames, []),
              returnValue: Future<List<_i9.Game>>.value(<_i9.Game>[]))
          as _i8.Future<List<_i9.Game>>);
}
