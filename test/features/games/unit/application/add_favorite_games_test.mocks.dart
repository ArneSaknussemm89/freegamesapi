// Mocks generated by Mockito 5.1.0 from annotations
// in freegamesexample/test/features/games/unit/application/add_favorite_games_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:freegamesexample/application/services/cloud_firestore.dart'
    as _i2;
import 'package:freegamesexample/core/use_cases.dart' as _i4;
import 'package:freegamesexample/features/games/application/services/favorites_service.dart'
    as _i3;
import 'package:freegamesexample/features/games/application/use_cases/add_favorite_game.dart'
    as _i7;
import 'package:freegamesexample/features/games/domain/models/game/game.dart'
    as _i6;
import 'package:freegamesexample/features/games/domain/value_objects/add_favorite_game_params.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeAppFirestoreService_0 extends _i1.Fake
    implements _i2.AppFirestoreService {}

class _FakeFavoriteGamesService_1 extends _i1.Fake
    implements _i3.FavoriteGamesService {}

class _FakeUseCaseResult_2<E, T> extends _i1.Fake
    implements _i4.UseCaseResult<E, T> {}

/// A class which mocks [FavoriteGamesService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFavoriteGamesService extends _i1.Mock
    implements _i3.FavoriteGamesService {
  MockFavoriteGamesService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AppFirestoreService get appFirestore => (super.noSuchMethod(
      Invocation.getter(#appFirestore),
      returnValue: _FakeAppFirestoreService_0()) as _i2.AppFirestoreService);
  @override
  _i5.Future<void> addFavorite(String? uid, _i6.Game? game) =>
      (super.noSuchMethod(Invocation.method(#addFavorite, [uid, game]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> removeFavorite(String? uid, _i6.Game? game) =>
      (super.noSuchMethod(Invocation.method(#removeFavorite, [uid, game]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
}

/// A class which mocks [AddFavoriteGameUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddFavoriteGameUseCase extends _i1.Mock
    implements _i7.AddFavoriteGameUseCase {
  MockAddFavoriteGameUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.FavoriteGamesService get favoritesService => (super.noSuchMethod(
      Invocation.getter(#favoritesService),
      returnValue: _FakeFavoriteGamesService_1()) as _i3.FavoriteGamesService);
  @override
  _i5.Future<_i4.UseCaseResult<Exception, _i4.Void>> execute(
          _i8.AddFavoriteGameUseCaseParams? params) =>
      (super.noSuchMethod(Invocation.method(#execute, [params]),
              returnValue: Future<_i4.UseCaseResult<Exception, _i4.Void>>.value(
                  _FakeUseCaseResult_2<Exception, _i4.Void>()))
          as _i5.Future<_i4.UseCaseResult<Exception, _i4.Void>>);
}
